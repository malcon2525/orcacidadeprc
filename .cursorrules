# Regras do Projeto OR√áACIDADE - Cursor AI

## üéØ **REGRAS CR√çTICAS (OBRIGAT√ìRIAS SEMPRE)**

### **üèóÔ∏è Estrutura de Arquivos - SEMPRE seguir**
```
M√ìDULO ‚Üí FUNCIONALIDADE ‚Üí ARQUIVOS_ESPEC√çFICOS

app/Http/Controllers/Web/[Modulo]/[Funcionalidade]/[Funcionalidade]Controller.php
app/Http/Controllers/Api/[Modulo]/[Funcionalidade]/[Funcionalidade]Controller.php
app/Models/[Modulo]/[Model].php
resources/views/[modulo]/[funcionalidade]/index.blade.php
resources/js/components/[modulo]/[funcionalidade]/Lista[Funcionalidade].vue
routes/web.php (TODAS as rotas)
```

### **üö´ PROIBI√á√ïES ABSOLUTAS**
- ‚ùå **NUNCA** criar estilos locais para componentes
- ‚ùå **NUNCA** usar `confirm()` nativo para exclus√µes
- ‚ùå **NUNCA** usar estilos inline
- ‚ùå **NUNCA** usar apenas um controller (sempre Web + Api)
- ‚ùå **NUNCA** colocar rotas em `api.php` (sempre em `web.php`)
- ‚ùå **NUNCA** esquecer do prefixo `/api` para rotas de dados
- ‚ùå **NUNCA** usar autentica√ß√£o JWT para CRUD interno

---

## üé® **PADR√ïES VISUAIS OBRIGAT√ìRIOS**

### **Cores Padronizadas (SEMPRE usar)**
- **Verde Principal**: `#5EA853` - T√≠tulos principais
- **Azul Secund√°rio**: `#18578A` - T√≠tulos de abas, cabe√ßalhos
- **Cinza M√©dio**: `#6c757d` - Texto secund√°rio, labels

### **Classes CSS Globais (OBRIGAT√ìRIO)**
```css
/* Larguras */
.w-100px { width: 100px !important; }
.w-180px { width: 180px !important; }
.max-w-200px { max-width: 200px !important; }

/* Alturas */
.min-h-58 { min-height: 58px !important; }
.h-58 { height: 58px !important; }

/* Funcionalidades */
.resize-vertical { resize: vertical !important; }
.overflow-auto { overflow: auto !important; }
.cursor-pointer { cursor: pointer !important; }
.z-1000 { z-index: 1000 !important; }

/* Texto */
.text-custom { color: #18578A !important; font-weight: 600; }
```

### **Estrutura Visual Base (OBRIGAT√ìRIO)**
```html
<div class="container-fluid px-4">
    <div class="card shadow-sm border-0 rounded-3 mb-4">
        <div class="card-header bg-white py-2 d-flex justify-content-between align-items-center">
            <h6 class="mb-0 fw-semibold" style="color: #5EA853; font-size: 1.2rem; padding: 5px 0;">
                <i class="fas fa-[icon] me-2"></i>[T√≠tulo da Funcionalidade]
            </h6>
        </div>
        <div class="card-body">
            <!-- Conte√∫do espec√≠fico aqui -->
        </div>
    </div>
</div>
```

---

## üîß **PADR√ïES CRUD OBRIGAT√ìRIOS**

### **Modal de Confirma√ß√£o (EXCLUS√ÉO) - SEMPRE usar**
```html
<div class="modal fade modal-confirmacao" id="modalConfirmacaoExclusao">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <div class="d-flex align-items-center">
                    <div class="header-icon">
                        <i class="fas fa-exclamation-triangle"></i>
                    </div>
                    <h5 class="modal-title mb-0">Confirmar Exclus√£o</h5>
                </div>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body text-center">
                <p class="confirm-text">Tem certeza que deseja excluir o [tipo]</p>
                <p class="target-entity">"{{ itemParaExcluir?.name }}"</p>
                <div class="irreversible">
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    <span>Esta a√ß√£o √© permanente e n√£o poder√° ser desfeita.</span>
                </div>
            </div>
            <div class="modal-footer justify-content-center">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-danger" @click="confirmarExclusao" :disabled="excluindo">
                    <span v-if="excluindo" class="spinner-border spinner-border-sm me-2"></span>
                    <i v-else class="fas fa-trash me-2"></i>
                    {{ excluindo ? 'Excluindo...' : 'Excluir' }}
                </button>
            </div>
        </div>
    </div>
</div>
```

### **Tabelas CRUD (SEMPRE usar)**
```html
<div class="table-responsive">
    <table class="table table-hover align-middle usuarios-table">
        <thead>
            <tr>
                <th class="fw-semibold text-custom">[Coluna]</th>
                <th class="fw-semibold text-custom text-end w-180px">A√ß√µes</th>
            </tr>
        </thead>
        <tbody>
            <tr v-for="item in dados" :key="item.id" class="usuario-row">
                <td class="align-middle">
                    <div class="fw-medium">{{ item.nome }}</div>
                </td>
                <td class="text-end">
                    <div class="d-flex gap-1 justify-content-end">
                        <button class="btn btn-sm btn-warning" @click="editarItem(item)" title="Editar">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button class="btn btn-sm btn-danger" @click="excluirItem(item)" title="Excluir">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </td>
            </tr>
        </tbody>
    </table>
</div>
```

### **Formul√°rios CRUD (SEMPRE usar)**
```html
<div class="form-floating">
    <input type="text" 
           class="form-control" 
           :class="{ 'is-invalid': errors.nome }"
           id="nome" 
           v-model="form.nome"
           placeholder="Nome do item"
           required>
    <label for="nome">Nome *</label>
</div>
<div class="invalid-feedback" v-if="errors.nome">
    {{ errors.name[0] }}
</div>
```

---

## üõ£Ô∏è **ROTAS - REGRAS OBRIGAT√ìRIAS**

### **Localiza√ß√£o (SEMPRE)**
- **TODAS as rotas em `routes/web.php`**
- **NUNCA usar `routes/api.php` para CRUD interno**

### **Estrutura de Rotas (OBRIGAT√ìRIO)**
```php
// ===== ROTAS WEB - INTERFACE =====
Route::prefix('[modulo]')->name('[modulo].')->group(function () {
    Route::prefix('[funcionalidade]')->name('[funcionalidade].')->group(function () {
        Route::get('/', [Web\[Modulo]\[Funcionalidade]\[Funcionalidade]Controller::class, 'index'])
            ->name('index');
    });
});

// ===== ROTAS API - DADOS =====
Route::prefix('api/[modulo]')->name('api.[modulo].')->group(function () {
    Route::prefix('[funcionalidade]')->name('[funcionalidade].')->group(function () {
        Route::get('/', [Api\[Modulo]\[Funcionalidade]\[Funcionalidade]Controller::class, 'listar'])
            ->name('listar');
        Route::post('/', [Api\[Modulo]\[Funcionalidade]\[Funcionalidade]Controller::class, 'store'])
            ->name('store');
        Route::put('/{id}', [Api\[Modulo]\[Funcionalidade]\[Funcionalidade]Controller::class, 'update'])
            ->name('update');
        Route::delete('/{id}', [Api\[Modulo]\[Funcionalidade]\[Funcionalidade]Controller::class, 'destroy'])
            ->name('destroy');
    });
});
```

---

## üîê **SISTEMA DE AUTENTICA√á√ÉO**

### **Configura√ß√£o (OBRIGAT√ìRIO)**
- **Driver**: Session-based (N√ÉO JWT)
- **Verifica√ß√£o**: M√©todo `checkAccess()` em todos os controllers

### **Verifica√ß√£o de Acesso (SEMPRE implementar)**
```php
private function checkAccess($permissions, $requireAll = false)
{
    $user = Auth::user();
    
    // 1. √â super admin? ‚Üí Acesso total
    if ($user->isSuperAdmin()) {
        return true;
    }
    
    // 2. Verifica√ß√£o de permiss√µes
    if (is_string($permissions)) {
        $permissions = [$permissions];
    }
    
    if ($requireAll) {
        foreach ($permissions as $permission) {
            if (!$user->hasPermission($permission)) {
                abort(403, "Permiss√£o obrigat√≥ria: {$permission}");
            }
        }
    } else {
        $hasAnyPermission = false;
        foreach ($permissions as $permission) {
            if ($user->hasPermission($permission)) {
                $hasAnyPermission = true;
                break;
            }
        }
        
        if (!$hasAnyPermission) {
            abort(403, 'Acesso negado. Permiss√£o insuficiente.');
        }
    }
    
    return true;
}
```

---

## üìù **NOMENCLATURA OBRIGAT√ìRIA**

| Elemento | Padr√£o | Exemplo |
|----------|--------|---------|
| **M√≥dulos** | min√∫sculo com underscore | `administracao`, `orcamento` |
| **Funcionalidades** | min√∫sculo com underscore | `usuarios`, `composicao_propria` |
| **Controllers** | PascalCase + Controller | `UsuariosController` |
| **Models** | PascalCase | `User`, `ComposicaoPropria` |
| **Services** | PascalCase + Service | `UsuariosService` |
| **Views** | snake_case | `index.blade.php` |
| **Componentes Vue** | `Lista[Funcionalidade].vue` | `ListaUsuarios.vue` |

---

## üì± **PAGINA√á√ÉO - REGRAS OBRIGAT√ìRIAS**

### **Posicionamento (SEMPRE)**
- **PAGINA√á√ÉO FORA DO CARD** principal
- **Container**: `paginacao-container mt-4`

### **Estrutura (OBRIGAT√ìRIO)**
```html
<div v-if="dados.length > 0" class="paginacao-container mt-4">
    <div class="d-flex justify-content-between align-items-center">
        <!-- Informa√ß√µes de Registros -->
        <div class="text-muted fw-medium">
            Mostrando {{ (paginaAtual - 1) * itensPorPagina + 1 }} at√© {{ Math.min(paginaAtual * itensPorPagina, dados.length) }} de {{ dados.length }} registros
        </div>
        
        <!-- Navega√ß√£o -->
        <nav v-if="totalPaginas > 1">
            <ul class="pagination pagination-generic mb-0">
                <!-- Bot√µes de navega√ß√£o aqui -->
            </ul>
        </nav>
    </div>
</div>
```

---

## üé® **BADGES E STATUS**

### **Badges DISCRETOS (SEMPRE usar)**
```html
<!-- Status Ativo -->
<span class="badge badge-status badge-ativo">
    <i class="fas fa-check-circle"></i>
    ATIVO
</span>

<!-- Status Inativo -->
<span class="badge badge-status badge-inativo">
    <i class="fas fa-times-circle"></i>
    INATIVO
</span>
```

**Regras:**
- ‚úÖ **SEMPRE usar** badges discretos (N√ÉO s√≥lidos Bootstrap)
- ‚úÖ **SEMPRE incluir** √≠cones Font Awesome
- ‚úÖ **SEMPRE usar** texto em mai√∫sculo (ATIVO, INATIVO)

---

## üîÑ **FLUXO DE IMPLEMENTA√á√ÉO**

### **Checklist para Nova Funcionalidade**
1. ‚úÖ Criar estrutura de pastas completa
2. ‚úÖ Definir namespace correto
3. ‚úÖ Criar controller Web com nomenclatura padr√£o
4. ‚úÖ Criar controller Api com nomenclatura padr√£o
5. ‚úÖ Criar model necess√°rio
6. ‚úÖ Criar view index (container Vue)
7. ‚úÖ Criar componente Vue `Lista[Funcionalidade].vue`
8. ‚úÖ **COLOCAR TODAS AS ROTAS em `routes/web.php`**
9. ‚úÖ **SEMPRE usar prefixo `/api` para rotas de dados**
10. ‚úÖ **NUNCA usar `routes/api.php` para CRUD interno**

---

## üìö **REFER√äNCIAS R√ÅPIDAS**

### **Arquivos de Diretrizes Detalhadas**
- **Estrutura**: `docs/diretrizes/01_projeto/01_padrao_estrutura_diretorios.md`
- **Layout**: `docs/diretrizes/01_projeto/02_padrao_layout_interface.md`
- **CRUD**: `docs/diretrizes/02_desenvolvimento/01_padrao_crud.md`
- **Autentica√ß√£o**: `docs/diretrizes/03_autenticacao/01_sistema_autenticacao.md`
- **Modais**: `docs/diretrizes/01_projeto/07_padrao_modais.md`

### **Arquivos de Implementa√ß√£o**
- **CSS Global**: `public/assets/css/modern-interface.css`
- **Rotas**: `routes/web.php`
- **App Vue**: `resources/js/app.js`

---

## üéØ **PRINC√çPIOS FUNDAMENTAIS**

### **Arquitetura**
- **Separa√ß√£o Web/Api**: Dois controllers por funcionalidade
- **Vue.js + API**: Interface din√¢mica com modal
- **Responsabilidade √önica**: Um CRUD = Dois Controllers
- **Interface Consistente**: Front-end padronizado e uniforme

### **Desenvolvimento**
- **Reutiliza√ß√£o**: Classes gen√©ricas para qualquer funcionalidade
- **Consist√™ncia**: Mesmo padr√£o para todas as opera√ß√µes
- **Manutenibilidade**: Estrutura clara e organizada
- **Escalabilidade**: Padr√µes que crescem com o projeto

---

> **IMPORTANTE**: Estas regras s√£o OBRIGAT√ìRIAS para manter a consist√™ncia do projeto OR√áACIDADE. Para detalhes completos, consulte as diretrizes detalhadas nas refer√™ncias.

> **√öLTIMA ATUALIZA√á√ÉO**: Janeiro 2025 - Baseado na an√°lise cr√≠tica das diretrizes oficiais (8.000+ linhas)
