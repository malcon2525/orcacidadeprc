<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use Illuminate\Support\Facades\Cache;

class TestAdSyncConfigCommand extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'ad:test-config';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Testar se as configura√ß√µes da sincroniza√ß√£o AD est√£o funcionando';

    /**
     * Execute the console command.
     */
    public function handle()
    {
        $this->info('üß™ Testando configura√ß√µes da Sincroniza√ß√£o AD...');
        $this->newLine();

        // Verificar se as configura√ß√µes existem no cache
        $frequency = Cache::get('ad_sync_frequency');
        $time = Cache::get('ad_sync_time');
        $enabled = Cache::get('ad_sync_enabled');
        $updatedAt = Cache::get('ad_sync_updated_at');

        $this->info('üìã Verificando se as configura√ß√µes est√£o salvas:');
        
        if ($frequency !== null) {
            $this->line('‚úÖ Frequ√™ncia: ' . $frequency);
        } else {
            $this->error('‚ùå Frequ√™ncia n√£o encontrada no cache');
        }

        if ($time !== null) {
            $this->line('‚úÖ Hor√°rio: ' . $time);
        } else {
            $this->error('‚ùå Hor√°rio n√£o encontrado no cache');
        }

        if ($enabled !== null) {
            $this->line('‚úÖ Status: ' . ($enabled ? 'Habilitada' : 'Desabilitada'));
        } else {
            $this->error('‚ùå Status n√£o encontrado no cache');
        }

        if ($updatedAt !== null) {
            $this->line('‚úÖ √öltima atualiza√ß√£o: ' . date('d/m/Y H:i:s', strtotime($updatedAt)));
        } else {
            $this->warn('‚ö†Ô∏è  Data de atualiza√ß√£o n√£o encontrada');
        }

        $this->newLine();

        // Testar se as configura√ß√µes s√£o v√°lidas
        $this->info('üîç Validando configura√ß√µes:');
        
        $validFrequencies = ['daily', 'weekly', 'monthly'];
        if (in_array($frequency, $validFrequencies)) {
            $this->line('‚úÖ Frequ√™ncia v√°lida: ' . $frequency);
        } else {
            $this->error('‚ùå Frequ√™ncia inv√°lida: ' . $frequency);
        }

        if (preg_match('/^([01]?[0-9]|2[0-3]):[0-5][0-9]$/', $time)) {
            $this->line('‚úÖ Formato de hor√°rio v√°lido: ' . $time);
        } else {
            $this->error('‚ùå Formato de hor√°rio inv√°lido: ' . $time);
        }

        if (is_bool($enabled)) {
            $this->line('‚úÖ Status v√°lido: ' . ($enabled ? 'Habilitada' : 'Desabilitada'));
        } else {
            $this->error('‚ùå Status inv√°lido: ' . $enabled);
        }

        $this->newLine();

        // Simular pr√≥xima execu√ß√£o
        if ($enabled) {
            $this->info('üìÖ Simulando pr√≥xima execu√ß√£o:');
            $nextExecution = $this->calculateNextExecution($frequency, $time);
            $this->line('Pr√≥xima execu√ß√£o: ' . $nextExecution);
        } else {
            $this->warn('‚ö†Ô∏è  Sincroniza√ß√£o desabilitada - n√£o h√° pr√≥xima execu√ß√£o');
        }

        $this->newLine();
        $this->info('‚úÖ Teste conclu√≠do!');
    }

    private function calculateNextExecution($frequency, $time)
    {
        $now = now();
        [$hours, $minutes] = explode(':', $time);
        
        $nextExecution = $now->copy()->setTime($hours, $minutes, 0);
        
        // Se j√° passou do hor√°rio hoje
        if ($nextExecution <= $now) {
            $nextExecution->addDay();
        }
        
        // Ajustar para frequ√™ncia
        switch ($frequency) {
            case 'weekly':
                // Pr√≥ximo domingo
                $daysToSunday = (7 - $nextExecution->dayOfWeek) % 7;
                $nextExecution->addDays($daysToSunday);
                break;
            case 'monthly':
                $nextExecution->addMonth();
                break;
        }
        
        return $nextExecution->format('d/m/Y \√†\s H:i');
    }
}
