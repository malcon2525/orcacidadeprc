<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use App\Models\Administracao\Role;
use App\Models\Administracao\Permission;
use App\Models\Administracao\User;
use Illuminate\Support\Facades\DB;

class CheckSuperRole extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'check:super-role';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Verificar se o papel super possui permiss√µes e usu√°rios';

    /**
     * Execute the console command.
     */
    public function handle()
    {
        $this->info('üîç Verificando papel Super Administrador...');
        $this->newLine();

        // Verificar se o papel existe
        $papel = Role::where('name', 'super')->first();
        
        if (!$papel) {
            $this->error('‚ùå Papel "super" n√£o encontrado!');
            return 1;
        }

        $this->info("‚úÖ Papel encontrado: {$papel->display_name} (ID: {$papel->id})");
        $this->newLine();

        // Verificar permiss√µes
        $this->info('üìã Verificando permiss√µes...');
        $permissoes = $papel->permissions;
        $this->line("Total de permiss√µes: {$permissoes->count()}");
        
        if ($permissoes->count() > 0) {
            foreach ($permissoes as $permissao) {
                $this->line("  ‚úÖ {$permissao->display_name} ({$permissao->name})");
            }
        } else {
            $this->warn("  ‚ö†Ô∏è  Nenhuma permiss√£o encontrada!");
        }

        $this->newLine();

        // Verificar usu√°rios
        $this->info('üë• Verificando usu√°rios...');
        $usuarios = $papel->users;
        $this->line("Total de usu√°rios: {$usuarios->count()}");
        
        if ($usuarios->count() > 0) {
            foreach ($usuarios as $usuario) {
                $this->line("  ‚úÖ {$usuario->name} ({$usuario->email})");
            }
        } else {
            $this->warn("  ‚ö†Ô∏è  Nenhum usu√°rio encontrado!");
        }

        $this->newLine();

        // Verificar tabelas de relacionamento
        $this->info('üîó Verificando tabelas de relacionamento...');
        
        $rolePermissionsCount = DB::table('role_permissions')->where('role_id', $papel->id)->count();
        $this->line("Registros em role_permissions: {$rolePermissionsCount}");
        
        $userRolesCount = DB::table('user_roles')->where('role_id', $papel->id)->count();
        $this->line("Registros em user_roles: {$userRolesCount}");

        $this->newLine();

        // Verificar se h√° discrep√¢ncia
        if ($permissoes->count() !== $rolePermissionsCount) {
            $this->error("‚ùå DISCREP√ÇNCIA: Eloquent mostra {$permissoes->count()} permiss√µes, mas tabela tem {$rolePermissionsCount}");
        } else {
            $this->info("‚úÖ Contadores de permiss√µes est√£o sincronizados");
        }

        if ($usuarios->count() !== $userRolesCount) {
            $this->error("‚ùå DISCREP√ÇNCIA: Eloquent mostra {$usuarios->count()} usu√°rios, mas tabela tem {$userRolesCount}");
        } else {
            $this->info("‚úÖ Contadores de usu√°rios est√£o sincronizados");
        }

        $this->newLine();
        $this->info('‚úÖ Verifica√ß√£o conclu√≠da!');
        
        return 0;
    }
}
